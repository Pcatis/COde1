import math
##########################################################################################################################
##################################################Viscosity#########################################################################################################################################################################################

#Al-Nasser and Al-Marhoun (2012)
def Vis_AlNMarh(Dens,Mwt,T,x,Syg):
    A = [2.528710, -1.210616, 4.337096e-1, 8.330000e-3, 1.467000e-4, 4.000000, 1.388000, 1.799000e-5, -1.322194]
    if 0.55<Syg<1.55:
        for i in range(x):
            v = A[0]*(math.exp(Dens**4))+A[1]*(math.exp(Dens**3))+A[2]*(math.exp(Dens**2))+A[3]*(math.exp(Dens))+A[4]*Mwt*(math.exp(A[5]*Dens**A[6]))+A[7]*T+A[8]
            return v

####################################################################################################################################################################################################################################################

#Londono 2002
def Vis_Lond(Syg, T, Dens,x):
    a=[-6.39821,-0.6045922,0.749768,0.1261051]
    b=[0.069718,-0.1013889,-0.0215294]
    A=[0.953363, -1.07384, 0.00131729]
    B=[-0.971028, 11.2077, 0.09013]
    C=[1.01803, 4.98986, 0.302737]
    D=[-0.990531, 4.17585, -0.63662]
    E=[1, -3.19646, 3.90961]
    F=[-1.00364, -0.181633, -7.79089]
    G=[0.99808, -1.62108, 0.000634836]
    H=[-1.00103, 0.676875, 4.62481]
    for i in range(x):
        Aa = A[0]+A[1]*T+A[2]*T**2
        Bb = B[0]+B[1]*T+B[2]*T**2
        Cc = C[0]+C[1]*T+C[2]*T**2
        Dd = D[0]+D[1]*T+D[2]*T**2
        Ee = E[0]+E[1]*T+E[2]*T**2
        Ff = F[0]+F[1]*T+F[2]*T**2
        Gg = G[0]+G[1]*T+G[2]*T**2
        Hh = H[0]+H[1]*T+H[2]*T**2
        f = (Aa + Bb*Dens+Cc*Dens**2+Dd*Dens**3)/(Ee + Ff*Dens+Gg*Dens**2+Hh*Dens**3)
        uatm = math.exp((a[0]+a[1]*math.log(Syg)+a[2]*math.log(T)+a[3]*math.log(Syg)*math.log(T))/(1+b[0]*math.log(Syg)+b[1]*math.log(T)+b[2]*math.log(Syg)*math.log(T)))
        ug = uatm + f
        return ug

####################################################################################################################################################################################################################################################

#Dean and Stiel (1965)
#Tc = R
#Pc = Psia
#Tca = K
#Pca = atm
def Vis_DeSt(Mwt,Pca,Tca,Pr,Tr,z,x):
    for i in range(x):
        pr = (0.27*Pr)/(Tr*z)
        em = (5.4402*(Tca**0.16)) / ((Mwt**0.5)*Pca**0.66)
        if Tr>1.5:
            m1 = (166.8e-5 * (0.1338 * Tr - 0.0932) ** 0.55)/em
            ug = m1 + (10.8e-4*((math.exp(1.439*pr)) - (math.exp(-1.11*pr**1.858))))/em
            return ug
        elif Tr<=1.5:
            m1 = (34e-5 * (Tr ** 0.88))/em
            ug = m1 + (10.8e-4*((math.exp(1.439*pr)) - (math.exp(-1.11*pr**1.858))))/em
            return ug

##########################################################################################################################

#Standing - visc Co2, H2S, N2
#Comp[1]
#Comp[0]
#Comp[2]
def Vis_Stand(Comp,Syg,x):
    for i in range(x):
        deltCo2= Comp[1]*((9.08e-3)*math.log(Syg) + 6.24e-3)
        deltH2S = Comp[0]*((8.49e-3)*math.log(Syg) + 3.73e-3)
        deltN2= Comp[2]*((8.48e-3)*math.log(Syg) + 9.59e-3)
        return deltN2, deltH2S, deltCo2

##########################################################################################################################

#Jossi(1962)
def Vis_Jossi(Tr, Pr, Mwt, Tca, Pca,z ,x):
    for i in range(x):
        pr = (0.27*Pr)/(z*Tr)
        e = ((Tca**0.166)/((Mwt**0.5)*(Pca**0.66)))
        if Tr<= 1.5:
            ugs = (34e-5*(Tr**0.88))/e
            ug = ugs + (-1e-4 + (0.10230 + 0.023364*pr + 0.058533*(pr**2) - 0.040758*(pr**3) + 0.0093324*(pr**4))**4)/e
            return ug
        elif Tr > 1.5:
            ugs = (17.78e-5*(4.58*Tr - 1.67)**0.625)/e
            ug = ugs + (-1e-4 + (0.10230 + 0.023364*pr + 0.058533*(pr**2) - 0.040758*(pr**3) + 0.0093324*(pr**4))**4)/e
            return ug

##############################################################################################################################################################################################################################################################################################################################################################################

#Dempsey procedure - Standing correction
def Vis_DempStand(Tf,Tr,Pr,x,Syg):
    for i in range(x):
        ug = (1.709e-5 - (2.062e-8)*Syg)*(Tf) + 8.118e-3 - (6.15e-3)*math.log(Syg)
        u = (ug / Tr) * math.exp(-2.4621820 + 2.97054714 * Pr - 0.286264054 * (Pr ** 2) + 0.00805420522 * (Pr ** 3) + Tr * (2.8086 - 3.498 * Pr + 0.360 * Pr ** 2 - 0.0104 * Pr ** 3) + (Tr ** 2) * (-0.793 + 1.396 * Pr - 0.149 * Pr ** 2 + 0.00441 * Pr ** 3) + (Tr ** 3) * (0.0839 - 0.1864 * Pr + 0.0203 * Pr ** 2 - 0.000609 * Pr ** 3))
        return u

##############################################################################################################################################################################################################################################################################################################################################################################

#ElSharkawy(2006)
def Visc_ElSh(Dens,Comp,Mwt,T,Syg,x):
    for i in range(x):
        D1=((9.379+0.01607*Mwt)*(T**1.5))/(209.2+19.26*Mwt + T)
        D2=3.448 + (986.4/T) + 0.01009*Mwt
        D3=2.447 - 0.224*D2
        deltH2s = Comp[0]*((-3.2267e-3)*math.log(Syg)+2.1479e-3)
        deltCo2 = Comp[1]*((6.4366e-3)*math.log(Syg)+6.7255e-3)
        deltC7 = CompC7[0]*((-3.2875e-1)*math.log(Syg)+1.2885e-1)
        ug = D1*(1e-4)*math.exp(D2*(Dens**D3))+deltC7+deltH2s+deltCo2
        return ug

##########################################################################################################################

#Lee et al.(1966)
def Visc_Leeal(Mwt,T,Dens,x):
    for i in range(x):
        D1=((9.379+0.01607*Mwt)*(T**1.5))/(209.2+19.26*Mwt + T)
        D2=3.448 + (986.4/T) + 0.01009*Mwt
        D3=2.447 - 0.224*D2
        ug = D1*(1e-4)*math.exp(D2*(Dens**D3))
        return ug

##########################################################################################################################

#Lee(1964)
def Visc_Lee64(T,Mwt,Dens,x):
    for i in range(x):
        K=((7.77+0.0063*Mwt)*(T**1.5))/(122.4+12.9*Mwt + T)
        X=2.57+(1914.5/T) + 0.0095*Mwt
        Y=1.11 + 0.04*X
        ug =(1e-4)*K*math.exp(X*(Dens**Y))
        return ug

####################################################################################################################################################################################################################################################

#Dempsey (1965)
def Visc_Demp(Pr,Tr,Comp,Tf,Mwt,x):
    A = [-2.46211820,2.97054714,-2.86264054e-1,8.05420533e-3,2.80860949,-3.49803305,3.60373020e-1,-1.04432413e-2,-7.93385684e-1,1.39643306,-1.49144925e-1,4.41015512e-3,8.39387178e-2,-1.86408848e-1,2.03367881e-2,-6.09579263e-4]
    B = [1.11231913e-2,1.67726604e-5,2.11360496e-9,-1.09485050e-4,-6.40316395e-8,-8.99374533e-11,4.57735189e-7,2.12903390e-10,3.97732249e-13]
    if 1<=Pr<=20 and 1.2<=Tr<=3:
        for i in range(x):
            t = A[0] + A[1]*Pr + A[2]*Pr**2 + A[3]*Pr**3 + Tr*(A[4]+A[5]*Pr+A[6]*Pr**2 + A[7]*Pr**3)+(Tr**2)*(A[8]+A[9]*Pr+A[10]*Pr**2 + A[11]*Pr**3)+(Tr**3)*(A[12]+A[13]*Pr + A[14]*Pr**2 + A[15]*Pr**3)
            g = B[0] + B[1]*(Tf) + B[2]*(Tf)**2 + B[3]*Mwt + B[4]*(Tf)*Mwt + B[5]*((Tf)**2)*Mwt +B[6]*Mwt**2 + B[7]*Tf*Mwt**2 + B[8]*(Tf**2)*Mwt**2
            ug = (g/Tr)*math.exp(t)
            return ug
    else:
        print('out of the range')

####################################################################################################################################################################################################################################################

#Sutton(2005)
def  Visc_Sutt(Syg,Dens,Mwt,Tc,Pc,Tr,x):
    if 0.5<=Syg<=1.8:
        for i in range(x):
            e= 0.949*(Tc/((Mwt**3)*(Pc**4)))**0.166
            X=3.47 + 1588/T + 0.0009*Mwt
            Y=1.66378 - 0.04679*X
            ugs=(1e-4)*(0.807*(Tr**0.618) - 0.357*math.exp(-0.449*Tr) + 0.34*math.exp(-4.058*Tr)+0.018)/e
            ug=ugs*math.exp(X*Dens**Y)
            return ug

##########################################################################################################################

#Lucas(1981)
def  Visc_Luc(Mwt,Pc,Tc,Pr,Tr,x):
    for i in range(x):
        e = 0.949 * (Tc / ((Mwt ** 3) * (Pc ** 4))) ** 0.166
        ugs = (1e-4) * (0.807 * (Tr ** 0.618) - 0.357 * math.exp(-0.449 * Tr) + 0.34 * math.exp(-4.058 * Tr + 0.018)) / e
        A1 = (1.245e-3*math.exp(5.1726*Tr**-0.3286))/Tr
        A2 = A1*(1.6553*Tr - 1.2723)
        A3 = (0.4489*math.exp(3.0578*Tr**-37.7332))/Tr
        A4 = (1.7368*math.exp(2.2310*Tr**-7.6351))/Tr
        A5 = 0.9425*math.exp(-0.1853*Tr**0.4489)
        term = (A1*(Pr**1.3088))/(A2*(Pr**A5) + (1+A3*(Pr**A4))**-1)
        ug = ugs+ugs*term
        return ug
##########################################################################################################################

